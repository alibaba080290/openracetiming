{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TextInputAffix = exports.AffixAdornment = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../../../core/theming\");\nvar _enums = require(\"./enums\");\nvar AFFIX_OFFSET = 12;\nvar AffixContext = _react.default.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: _enums.AdornmentSide.Left\n});\nvar AffixAdornment = exports.AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return _react.default.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\nvar TextInputAffix = exports.TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _React$useContext = _react.default.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier;\n  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = (0, _defineProperty2.default)({\n    top: topPosition\n  }, side, offset);\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, _react.default.createElement(_reactNative.Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nvar _default = exports.default = (0, _theming.withTheme)(TextInputAffix);","map":{"version":3,"names":["_react","_interopRequireDefault","require","_color","_reactNative","_theming","_enums","AFFIX_OFFSET","AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","exports","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","createElement","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","_React$useContext","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","_defineProperty2","default","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems","_default","withTheme"],"sources":["/home/admin/openracetiming/node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}