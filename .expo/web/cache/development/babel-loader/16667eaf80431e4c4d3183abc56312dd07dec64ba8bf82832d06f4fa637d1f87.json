{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getStateFromPath;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    (0, _validatePathConfig.default)(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n    return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n      }\n    }\n    return Object.assign(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return Object.assign({}, c, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop() {\n      if (!config.regex) {\n        return 0;\n      }\n      var match = remainingPath.match(config.regex);\n      if (match) {\n        var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p, i) {\n          return Object.assign(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n        }, {});\n        routes = config.routeNames.map(function (name) {\n          var _config$path;\n          var config = configs.find(function (c) {\n            return c.screen === name;\n          });\n          var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p) {\n            var value = matchedParams[p];\n            if (value) {\n              var _config$parse;\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1;\n      }\n    },\n    _config$pattern,\n    _ret;\n  for (var config of configs) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret === 1) break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n    }\n    return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n  }).join('') + \")\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2.default)(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, _findFocusedRoute.default)(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = Object.assign({}, route.params, params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","getStateFromPath","path","options","_ref","validatePathConfig","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","apply","_toConsumableArray2","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","_defineProperty2","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","value","_config$parse","parse","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern","pop","escape","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","findFocusedRoute","parseQueryParams","parseConfig","query"],"sources":["/home/admin/openracetiming/node_modules/@react-navigation/core/lib/module/getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}