{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeIconAPI = exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;\nexports.default = createIconSet;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactNative = require(\"react-native\");\nvar _ensureNativeModuleAvailable = _interopRequireDefault(require(\"./ensure-native-module-available\"));\nvar _createIconSourceCache = _interopRequireDefault(require(\"./create-icon-source-cache\"));\nvar _iconButton = _interopRequireDefault(require(\"./icon-button\"));\nvar _jsxFileName = \"/home/admin/openracetiming/node_modules/react-native-vector-icons/lib/create-icon-set.js\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar NativeIconAPI = exports.NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;\nvar DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_SIZE = 12;\nvar DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_COLOR = 'black';\nfunction createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = _reactNative.Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));\n  var Icon = function (_PureComponent) {\n    function Icon() {\n      var _this;\n      (0, _classCallCheck2.default)(this, Icon);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, Icon, [].concat(args));\n      _this.root = null;\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n      return _this;\n    }\n    (0, _inherits2.default)(Icon, _PureComponent);\n    return (0, _createClass2.default)(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          name = _this$props.name,\n          size = _this$props.size,\n          color = _this$props.color,\n          style = _this$props.style,\n          children = _this$props.children,\n          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        var glyph = name ? glyphMap[name] || '?' : '';\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({\n          selectable: false\n        }, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }\n        }), glyph, children);\n      }\n    }]);\n  }(_react.PureComponent);\n  Icon.propTypes = {\n    allowFontScaling: _propTypes.default.bool,\n    name: IconNamePropType,\n    size: _propTypes.default.number,\n    color: _propTypes.default.any,\n    children: _propTypes.default.node,\n    style: _propTypes.default.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = (0, _createIconSourceCache.default)();\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    (0, _ensureNativeModuleAvailable.default)();\n    var glyph = resolveGlyph(name);\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: _reactNative.PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n  function getImageSource(_x) {\n    return _getImageSource.apply(this, arguments);\n  }\n  function _getImageSource() {\n    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n      (0, _ensureNativeModuleAvailable.default)();\n      var glyph = resolveGlyph(name);\n      var processedColor = (0, _reactNative.processColor)(color);\n      var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n      if (imageSourceCache.has(cacheKey)) {\n        return imageSourceCache.get(cacheKey);\n      }\n      try {\n        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n        var value = {\n          uri: imagePath,\n          scale: _reactNative.PixelRatio.get()\n        };\n        imageSourceCache.setValue(cacheKey, value);\n        return value;\n      } catch (error) {\n        imageSourceCache.setError(cacheKey, error);\n        throw error;\n      }\n    });\n    return _getImageSource.apply(this, arguments);\n  }\n  function loadFont() {\n    return _loadFont.apply(this, arguments);\n  }\n  function _loadFont() {\n    _loadFont = (0, _asyncToGenerator2.default)(function* () {\n      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n      if (_reactNative.Platform.OS === 'ios') {\n        (0, _ensureNativeModuleAvailable.default)();\n        if (!file) {\n          throw new Error('Unable to load font, because no file was specified. ');\n        }\n        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));\n      }\n    });\n    return _loadFont.apply(this, arguments);\n  }\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n  function getFontFamily() {\n    return fontReference;\n  }\n  Icon.Button = (0, _iconButton.default)(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactNative","_ensureNativeModuleAvailable","_createIconSourceCache","_iconButton","_jsxFileName","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","NativeIconAPI","exports","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","IconNamePropType","PropTypes","oneOf","keys","Icon","_PureComponent","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","root","handleRef","ref","_inherits2","_createClass2","key","value","setNativeProps","nativeProps","render","_this$props","props","name","size","color","style","children","_objectWithoutProperties2","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","createElement","Text","_extends2","selectable","__self","__source","fileName","lineNumber","columnNumber","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","undefined","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","imagePath","getImageForFontSync","uri","scale","PixelRatio","setValue","error","setError","getImageSource","_x","_getImageSource","_asyncToGenerator2","getImageForFont","loadFont","_loadFont","file","OS","Error","loadFontWithFileName","_toConsumableArray2","split","hasIcon","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["/home/admin/openracetiming/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}