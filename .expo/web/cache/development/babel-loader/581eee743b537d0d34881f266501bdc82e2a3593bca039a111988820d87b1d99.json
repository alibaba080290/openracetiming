{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.isCancel = isCancel;\nexports.isInProgress = isInProgress;\nexports.pick = pick;\nexports.pickDirectory = pickDirectory;\nexports.pickMultiple = pickMultiple;\nexports.pickSingle = pickSingle;\nexports.releaseSecureAccess = releaseSecureAccess;\nexports.types = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _reactNative = require(\"react-native\");\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar _fileTypes = require(\"./fileTypes\");\nvar types = exports.types = _fileTypes.perPlatformTypes[_reactNative.Platform.OS];\nvar RNDocumentPicker = _reactNative.NativeModules.RNDocumentPicker;\nfunction pickDirectory(_x) {\n  return _pickDirectory.apply(this, arguments);\n}\nfunction _pickDirectory() {\n  _pickDirectory = (0, _asyncToGenerator2.default)(function* (params) {\n    if (_reactNative.Platform.OS === 'ios') {\n      var result = yield pick(Object.assign({}, params, {\n        mode: 'open',\n        allowMultiSelection: false,\n        type: ['public.folder']\n      }));\n      return {\n        uri: result[0].uri\n      };\n    } else {\n      return RNDocumentPicker.pickDirectory();\n    }\n  });\n  return _pickDirectory.apply(this, arguments);\n}\nfunction pickMultiple(opts) {\n  var options = Object.assign({}, opts, {\n    allowMultiSelection: true\n  });\n  return pick(options);\n}\nfunction pickSingle(opts) {\n  var options = Object.assign({}, opts, {\n    allowMultiSelection: false\n  });\n  return pick(options).then(function (results) {\n    return results[0];\n  });\n}\nfunction pick(opts) {\n  var options = Object.assign({\n    allowMultiSelection: false,\n    type: [types.allFiles]\n  }, opts);\n  var newOpts = Object.assign({\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical'\n  }, options, {\n    type: Array.isArray(options.type) ? options.type : [options.type]\n  });\n  return doPick(newOpts);\n}\nfunction doPick(options) {\n  var _options$mode, _options$copyTo;\n  (0, _invariant.default)(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  (0, _invariant.default)(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  (0, _invariant.default)(options.type.every(function (type) {\n    return typeof type === 'string';\n  }), \"Unexpected type option in \" + options.type + \", did you try using a DocumentPicker.types.* that does not exist?\");\n  (0, _invariant.default)(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  (0, _invariant.default)(!options.type.includes('folder'), 'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"');\n  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) !== null && _options$mode !== void 0 ? _options$mode : '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode);\n  }\n  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) !== null && _options$copyTo !== void 0 ? _options$copyTo : '')) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo);\n  }\n  return RNDocumentPicker.pick(options);\n}\nfunction releaseSecureAccess(uris) {\n  if (_reactNative.Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n  (0, _invariant.default)(Array.isArray(uris) && uris.every(function (uri) {\n    return typeof uri === 'string';\n  }), \"\\\"uris\\\" should be an array of strings, was \" + uris);\n  return RNDocumentPicker.releaseSecureAccess(uris);\n}\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\nvar E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';\nfunction isCancel(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);\n}\nfunction isInProgress(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);\n}\nfunction isErrorWithCode(err, errorCode) {\n  if (err instanceof Error && 'code' in err) {\n    var nativeModuleErrorInstance = err;\n    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;\n  }\n  return false;\n}\nvar _default = exports.default = {\n  isCancel: isCancel,\n  releaseSecureAccess: releaseSecureAccess,\n  pickDirectory: pickDirectory,\n  pick: pick,\n  pickMultiple: pickMultiple,\n  pickSingle: pickSingle,\n  types: types,\n  perPlatformTypes: _fileTypes.perPlatformTypes\n};","map":{"version":3,"names":["_reactNative","require","_invariant","_interopRequireDefault","_fileTypes","types","exports","perPlatformTypes","Platform","OS","RNDocumentPicker","NativeModules","pickDirectory","_x","_pickDirectory","apply","arguments","_asyncToGenerator2","default","params","result","pick","Object","assign","mode","allowMultiSelection","type","uri","pickMultiple","opts","options","pickSingle","then","results","allFiles","newOpts","presentationStyle","transitionStyle","Array","isArray","doPick","_options$mode","_options$copyTo","invariant","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","Error","nativeModuleErrorInstance","code","_default"],"sources":["/home/admin/openracetiming/node_modules/react-native-document-picker/lib/module/index.tsx"],"sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return RNDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}