{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../core/theming\");\nvar _colors = require(\"../styles/colors\");\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"ellipsizeMode\"];\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    selectedColor = _ref.selectedColor,\n    ellipsizeMode = _ref.ellipsizeMode,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),\n    elevation = _React$useRef.current;\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var dark = theme.dark,\n    colors = theme.colors;\n  var defaultBackgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? defaultBackgroundColor : _ref2$backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? 16 : _ref2$borderRadius;\n  var borderColor = mode === 'outlined' ? (0, _color.default)(selectedColor !== undefined ? selectedColor : (0, _color.default)(dark ? _colors.white : _colors.black)).alpha(0.29).rgb().string() : backgroundColor;\n  var textColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n  var backgroundColorString = typeof backgroundColor === 'string' ? backgroundColor : defaultBackgroundColor;\n  var selectedBackgroundColor = (dark ? (0, _color.default)(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4) : (0, _color.default)(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n  var underlayColor = selectedColor ? (0, _color.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n  var accessibilityTraits = ['button'];\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n  return React.createElement(_Surface.default, _extends({\n    style: [styles.container, {\n      elevation: _reactNative.Platform.OS === 'android' ? elevation : 0,\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, rest), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: accessibilityTraits,\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, {\n      paddingRight: onClose ? 32 : 4\n    }]\n  }, avatar && !icon ? React.createElement(_reactNative.View, {\n    style: [styles.avatarWrapper, disabled && {\n      opacity: 0.26\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {\n    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    color: avatar ? _colors.white : iconColor,\n    size: 18\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"check\",\n    color: avatar ? _colors.white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.text, Object.assign({}, theme.fonts.regular, {\n      color: textColor,\n      marginRight: onClose ? 0 : 8,\n      marginLeft: avatar || icon || selected ? 4 : 8\n    }), textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(_reactNative.View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: [styles.icon, styles.closeIcon]\n  }, closeIcon ? React.createElement(_Icon.default, {\n    source: closeIcon,\n    color: iconColor,\n    size: 16\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"close-circle\",\n    size: 16,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: _reactNative.Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nvar _default = exports.default = (0, _theming.withTheme)(Chip);","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_color","_interopRequireDefault","_Icon","_MaterialCommunityIcon","_Surface","_Text","_TouchableRipple","_theming","_colors","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","accessibilityLabel","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","_objectWithoutProperties2","_React$useRef","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","_ref2","StyleSheet","flatten","_ref2$backgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","borderColor","color","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","createElement","Surface","_extends","styles","container","Platform","OS","TouchableRipple","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","View","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","Icon","source","size","MaterialCommunityIcon","name","direction","Text","selectable","numberOfLines","assign","fonts","regular","marginRight","marginLeft","closeButtonStyle","TouchableWithoutFeedback","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent","_default","exports","withTheme"],"sources":["/home/admin/openracetiming/node_modules/react-native-paper/lib/module/components/Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const { backgroundColor = defaultBackgroundColor, borderRadius = 16 } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (\n    dark\n      ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}