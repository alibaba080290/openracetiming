{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButtonGroupContext = exports.ToggleButtonGroup = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar ToggleButtonGroupContext = exports.ToggleButtonGroupContext = React.createContext(null);\nvar ToggleButtonGroup = exports.ToggleButtonGroup = function ToggleButtonGroup(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children;\n  return React.createElement(ToggleButtonGroupContext.Provider, {\n    value: {\n      value: value,\n      onValueChange: onValueChange\n    }\n  }, children);\n};\nToggleButtonGroup.displayName = 'ToggleButton.Group';\nvar _default = exports.default = ToggleButtonGroup;","map":{"version":3,"names":["React","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButtonGroupContext","exports","createContext","ToggleButtonGroup","_ref","value","onValueChange","children","createElement","Provider","displayName","_default"],"sources":["/home/admin/openracetiming/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void | null;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string | null;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType = {\n  value: string | null;\n  onValueChange: (item: string) => void | null;\n};\n\nexport const ToggleButtonGroupContext =\n  React.createContext<ToggleButtonContextType>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out <a href=\"toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst ToggleButtonGroup = ({ value, onValueChange, children }: Props) => (\n  <ToggleButtonGroupContext.Provider\n    value={{\n      value,\n      onValueChange,\n    }}\n  >\n    {children}\n  </ToggleButtonGroupContext.Provider>\n);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\n\nexport default ToggleButtonGroup;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonGroup };\n"],"mappings":";;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AAAA,SAAAD,wBAAAE,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAJ,uBAAA,YAAAA,wBAAAE,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,EAAA,IAAAd,CAAA,gBAAAc,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,EAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,EAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,EAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,EAAA,IAAAd,CAAA,CAAAc,EAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAsBO,IAAMmB,wBAAwB,GAAAC,OAAA,CAAAD,wBAAA,GACnCvB,KAAK,CAACyB,aAAN,CAA6C,IAA7C,CADK;AAkCP,IAAMC,iBAAiB,GAAAF,OAAA,CAAAE,iBAAA,GAAG,SAApBA,iBAAiBA,CAAGC,IAAA;EAAA,IAAGC,KAAF,GAADD,IAAA,CAAGC,KAAF;IAASC,aAAT,GAADF,IAAA,CAAUE,aAAT;IAAwBC,QAAA,GAAzBH,IAAA,CAAyBG,QAAA;EAAzB,OACxB9B,KAAA,CAAA+B,aAAA,CAACR,wBAAD,CAA0BS,QAA1B;IACEJ,KAAK,EAAE;MACLA,KADK,EACLA,KADK;MAELC,aAAA,EAAAA;IAFK;EADT,GAMGC,QANH,CADwB;AAAA,CAA1B;AAWAJ,iBAAiB,CAACO,WAAlB,GAAgC,oBAAhC;AAAA,IAAAC,QAAA,GAAAV,OAAA,CAAAX,OAAA,GAEea,iBAAf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}