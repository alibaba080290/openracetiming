{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NfcManagerAndroid = exports.NfcAdapter = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _NativeNfcManager = require(\"./NativeNfcManager\");\nvar _NfcManager = require(\"./NfcManager\");\nvar _MifareClassicHandlerAndroid = require(\"./NfcTech/MifareClassicHandlerAndroid\");\nvar _MifareUltralightHandlerAndroid = require(\"./NfcTech/MifareUltralightHandlerAndroid\");\nvar _NdefFormatableHandlerAndroid = require(\"./NfcTech/NdefFormatableHandlerAndroid\");\nvar _NfcError = require(\"./NfcError\");\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar NfcAdapter = exports.NfcAdapter = {\n  FLAG_READER_NFC_A: 0x1,\n  FLAG_READER_NFC_B: 0x2,\n  FLAG_READER_NFC_F: 0x4,\n  FLAG_READER_NFC_V: 0x8,\n  FLAG_READER_NFC_BARCODE: 0x10,\n  FLAG_READER_SKIP_NDEF_CHECK: 0x80,\n  FLAG_READER_NO_PLATFORM_SOUNDS: 0x100\n};\nvar delay = function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nvar NfcManagerAndroid = exports.NfcManagerAndroid = function (_NfcManagerBase) {\n  function NfcManagerAndroid() {\n    var _this;\n    (0, _classCallCheck2.default)(this, NfcManagerAndroid);\n    _this = _callSuper(this, NfcManagerAndroid);\n    _this.requestTechnology = function () {\n      var _ref = (0, _asyncToGenerator2.default)(function* (tech) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        try {\n          if (typeof tech === 'string') {\n            tech = [tech];\n          }\n          var sessionAvailable = yield _this._hasTagEventRegistrationAndroid();\n          if (!sessionAvailable) {\n            yield _this.registerTagEvent(options);\n            _this.cleanUpTagRegistration = true;\n          }\n          return yield (0, _NativeNfcManager.callNative)('requestTechnology', [tech]);\n        } catch (ex) {\n          throw (0, _NfcError.buildNfcExceptionAndroid)(ex);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    _this.cancelTechnologyRequest = (0, _asyncToGenerator2.default)(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _options$throwOnError = options.throwOnError,\n        throwOnError = _options$throwOnError === void 0 ? false : _options$throwOnError,\n        _options$delayMsAndro = options.delayMsAndroid,\n        delayMsAndroid = _options$delayMsAndro === void 0 ? 1000 : _options$delayMsAndro;\n      try {\n        yield (0, _NativeNfcManager.callNative)('cancelTechnologyRequest');\n        if (_this.cleanUpTagRegistration) {\n          yield delay(delayMsAndroid);\n          yield _this.unregisterTagEvent();\n          _this.cleanUpTagRegistration = false;\n        }\n      } catch (ex) {\n        if (throwOnError) {\n          throw (0, _NfcError.buildNfcExceptionAndroid)(ex);\n        }\n      }\n    });\n    _this.getBackgroundTag = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('getBackgroundTag'));\n    };\n    _this.clearBackgroundTag = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('clearBackgroundTag'));\n    };\n    _this.isEnabled = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('isEnabled'));\n    };\n    _this.goToNfcSetting = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('goToNfcSetting'));\n    };\n    _this.getLaunchTagEvent = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('getLaunchTagEvent'));\n    };\n    _this.setNdefPushMessage = function (bytes) {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('setNdefPushMessage', [bytes]));\n    };\n    _this.setTimeout = function (timeout) {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('setTimeout', [timeout]));\n    };\n    _this.connect = function (techs) {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('connect', [techs]));\n    };\n    _this.close = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('close'));\n    };\n    _this.transceive = function (bytes) {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('transceive', [bytes]));\n    };\n    _this.getMaxTransceiveLength = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('getMaxTransceiveLength'));\n    };\n    _this._hasTagEventRegistrationAndroid = function () {\n      return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('hasTagEventRegistration'));\n    };\n    _this.cleanUpTagRegistration = false;\n    return _this;\n  }\n  (0, _inherits2.default)(NfcManagerAndroid, _NfcManagerBase);\n  return (0, _createClass2.default)(NfcManagerAndroid, [{\n    key: \"mifareClassicHandlerAndroid\",\n    get: function get() {\n      if (!this._mifareClassicHandlerAndroid) {\n        this._mifareClassicHandlerAndroid = new _MifareClassicHandlerAndroid.MifareClassicHandlerAndroid(this);\n      }\n      return this._mifareClassicHandlerAndroid;\n    }\n  }, {\n    key: \"mifareUltralightHandlerAndroid\",\n    get: function get() {\n      if (!this._mifareUltralightHandlerAndroid) {\n        this._mifareUltralightHandlerAndroid = new _MifareUltralightHandlerAndroid.MifareUltralightHandlerAndroid(this);\n      }\n      return this._mifareUltralightHandlerAndroid;\n    }\n  }, {\n    key: \"ndefFormatableHandlerAndroid\",\n    get: function get() {\n      if (!this._ndefFormatableHandlerAndroid) {\n        this._ndefFormatableHandlerAndroid = new _NdefFormatableHandlerAndroid.NdefFormatableHandlerAndroid(this);\n      }\n      return this._ndefFormatableHandlerAndroid;\n    }\n  }]);\n}(_NfcManager.NfcManagerBase);","map":{"version":3,"names":["_NativeNfcManager","require","_NfcManager","_MifareClassicHandlerAndroid","_MifareUltralightHandlerAndroid","_NdefFormatableHandlerAndroid","_NfcError","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","NfcAdapter","exports","FLAG_READER_NFC_A","FLAG_READER_NFC_B","FLAG_READER_NFC_F","FLAG_READER_NFC_V","FLAG_READER_NFC_BARCODE","FLAG_READER_SKIP_NDEF_CHECK","FLAG_READER_NO_PLATFORM_SOUNDS","delay","ms","Promise","resolve","setTimeout","NfcManagerAndroid","_NfcManagerBase","_this","_classCallCheck2","requestTechnology","_ref","_asyncToGenerator2","tech","options","arguments","length","undefined","sessionAvailable","_hasTagEventRegistrationAndroid","registerTagEvent","cleanUpTagRegistration","callNative","ex","buildNfcExceptionAndroid","_x","cancelTechnologyRequest","_options$throwOnError","throwOnError","_options$delayMsAndro","delayMsAndroid","unregisterTagEvent","getBackgroundTag","handleNativeException","clearBackgroundTag","isEnabled","goToNfcSetting","getLaunchTagEvent","setNdefPushMessage","bytes","timeout","connect","techs","close","transceive","getMaxTransceiveLength","_inherits2","_createClass2","key","get","_mifareClassicHandlerAndroid","MifareClassicHandlerAndroid","_mifareUltralightHandlerAndroid","MifareUltralightHandlerAndroid","_ndefFormatableHandlerAndroid","NdefFormatableHandlerAndroid","NfcManagerBase"],"sources":["/home/admin/openracetiming/node_modules/react-native-nfc-manager/src/NfcManagerAndroid.js"],"sourcesContent":["import {callNative} from './NativeNfcManager';\nimport {NfcManagerBase} from './NfcManager';\nimport {MifareClassicHandlerAndroid} from './NfcTech/MifareClassicHandlerAndroid';\nimport {MifareUltralightHandlerAndroid} from './NfcTech/MifareUltralightHandlerAndroid';\nimport {NdefFormatableHandlerAndroid} from './NfcTech/NdefFormatableHandlerAndroid';\nimport {handleNativeException, buildNfcExceptionAndroid} from './NfcError';\n\nconst NfcAdapter = {\n  FLAG_READER_NFC_A: 0x1,\n  FLAG_READER_NFC_B: 0x2,\n  FLAG_READER_NFC_F: 0x4,\n  FLAG_READER_NFC_V: 0x8,\n  FLAG_READER_NFC_BARCODE: 0x10,\n  FLAG_READER_SKIP_NDEF_CHECK: 0x80,\n  FLAG_READER_NO_PLATFORM_SOUNDS: 0x100,\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nclass NfcManagerAndroid extends NfcManagerBase {\n  constructor() {\n    super();\n    this.cleanUpTagRegistration = false;\n  }\n\n  requestTechnology = async (tech, options = {}) => {\n    try {\n      if (typeof tech === 'string') {\n        tech = [tech];\n      }\n\n      const sessionAvailable = await this._hasTagEventRegistrationAndroid();\n\n      // make sure we do register for tag event\n      if (!sessionAvailable) {\n        await this.registerTagEvent(options);\n        this.cleanUpTagRegistration = true;\n      }\n\n      return await callNative('requestTechnology', [tech]);\n    } catch (ex) {\n      throw buildNfcExceptionAndroid(ex);\n    }\n  };\n\n  cancelTechnologyRequest = async (options = {}) => {\n    const {throwOnError = false, delayMsAndroid = 1000} = options;\n\n    try {\n      await callNative('cancelTechnologyRequest');\n\n      if (this.cleanUpTagRegistration) {\n        await delay(delayMsAndroid);\n        await this.unregisterTagEvent();\n        this.cleanUpTagRegistration = false;\n      }\n    } catch (ex) {\n      if (throwOnError) {\n        throw buildNfcExceptionAndroid(ex);\n      }\n    }\n  };\n\n  getBackgroundTag = () =>\n    handleNativeException(callNative('getBackgroundTag'));\n\n  clearBackgroundTag = () =>\n    handleNativeException(callNative('clearBackgroundTag'));\n\n  // -------------------------------------\n  // public only for Android\n  // -------------------------------------\n  isEnabled = () => handleNativeException(callNative('isEnabled'));\n\n  goToNfcSetting = () => handleNativeException(callNative('goToNfcSetting'));\n\n  getLaunchTagEvent = () =>\n    handleNativeException(callNative('getLaunchTagEvent'));\n\n  setNdefPushMessage = (bytes) =>\n    handleNativeException(callNative('setNdefPushMessage', [bytes]));\n\n  setTimeout = (timeout) =>\n    handleNativeException(callNative('setTimeout', [timeout]));\n\n  connect = (techs) => handleNativeException(callNative('connect', [techs]));\n\n  close = () => handleNativeException(callNative('close'));\n\n  transceive = (bytes) =>\n    handleNativeException(callNative('transceive', [bytes]));\n\n  getMaxTransceiveLength = () =>\n    handleNativeException(callNative('getMaxTransceiveLength'));\n\n  // -------------------------------------\n  // (android) NfcTech.MifareClassic API\n  // -------------------------------------\n  get mifareClassicHandlerAndroid() {\n    if (!this._mifareClassicHandlerAndroid) {\n      this._mifareClassicHandlerAndroid = new MifareClassicHandlerAndroid(this);\n    }\n    return this._mifareClassicHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // (android) NfcTech.MifareUltralight API\n  // -------------------------------------\n  get mifareUltralightHandlerAndroid() {\n    if (!this._mifareUltralightHandlerAndroid) {\n      this._mifareUltralightHandlerAndroid = new MifareUltralightHandlerAndroid(\n        this,\n      );\n    }\n    return this._mifareUltralightHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // (android) NfcTech.NdefFormatable API\n  // -------------------------------------\n  get ndefFormatableHandlerAndroid() {\n    if (!this._ndefFormatableHandlerAndroid) {\n      this._ndefFormatableHandlerAndroid = new NdefFormatableHandlerAndroid(this);\n    }\n    return this._ndefFormatableHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // Android private\n  // -------------------------------------\n  _hasTagEventRegistrationAndroid = () =>\n    handleNativeException(callNative('hasTagEventRegistration'));\n}\n\nexport {NfcAdapter, NfcManagerAndroid};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}