{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useScrollToTop;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\nfunction useScrollToTop(ref) {\n  var navigation = (0, _core.useNavigation)();\n  var route = (0, _core.useRoute)();\n  React.useEffect(function () {\n    var current = navigation;\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n    if (!current) {\n      return;\n    }\n    var unsubscribe = current.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      var isFirst = navigation === current || navigation.getState().routes[0].key === route.key;\n      requestAnimationFrame(function () {\n        var scrollable = getScrollableNode(ref);\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","useNavigation","route","useRoute","useEffect","getState","type","getParent","unsubscribe","addListener","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"sources":["/home/admin/openracetiming/node_modules/@react-navigation/native/lib/module/useScrollToTop.tsx"],"sourcesContent":["import { EventArg, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let current = navigation;\n\n    // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener(\n      // We don't wanna import tab types here to avoid extra deps\n      // in addition, there are multiple tab implementations\n      // @ts-expect-error\n      'tabPress',\n      (e: EventArg<'tabPress', true>) => {\n        // We should scroll to top only when the screen is focused\n        const isFocused = navigation.isFocused();\n\n        // In a nested stack navigator, tab press resets the stack to first screen\n        // So we should scroll to top only when we are on first screen\n        const isFirst =\n          navigation === current ||\n          navigation.getState().routes[0].key === route.key;\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({ x: 0, y: 0, animated: true });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({ offset: 0, animated: true });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n            }\n          }\n        });\n      }\n    );\n\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}