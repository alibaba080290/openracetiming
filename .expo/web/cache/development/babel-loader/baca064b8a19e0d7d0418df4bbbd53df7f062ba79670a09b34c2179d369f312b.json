{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\nvar _reactNative = require(\"react-native\");\nvar LocalStorage = exports.default = function () {\n  function LocalStorage() {\n    (0, _classCallCheck2.default)(this, LocalStorage);\n  }\n  return (0, _createClass2.default)(LocalStorage, null, [{\n    key: \"setStartTime\",\n    value: function setStartTime(racekey, timestamp) {\n      return _asyncStorage.default.setItem(\"@ORT_starttimes:\" + racekey + \":default\", \"\" + timestamp);\n    }\n  }, {\n    key: \"getStartTime\",\n    value: function getStartTime(racekey) {\n      return _asyncStorage.default.getItem(\"@ORT_starttimes:\" + racekey + \":default\");\n    }\n  }, {\n    key: \"writeFinishTime\",\n    value: function writeFinishTime(racekey, timestamp, id) {\n      return _asyncStorage.default.getItem(\"@ORT_finishtimes:\" + racekey).then(function (times) {\n        LocalStorage.writeFinishToStorage(times, racekey, timestamp, id);\n      }).catch(function () {\n        LocalStorage.writeFinishToStorage('', racekey, timestamp, id);\n      });\n    }\n  }, {\n    key: \"writeFinishToStorage\",\n    value: function writeFinishToStorage(times, racekey, timestamp, id) {\n      var timesObj = times ? JSON.parse(times) : {};\n      timesObj[id] = timestamp;\n      return _asyncStorage.default.setItem(\"@ORT_finishtimes:\" + racekey, JSON.stringify(timesObj));\n    }\n  }, {\n    key: \"getEntrant\",\n    value: function getEntrant(racekey, entrantId) {\n      return _asyncStorage.default.getItem(\"@ORT_entrantsByKey:\" + racekey + \":\" + entrantId);\n    }\n  }, {\n    key: \"getAllEntrants\",\n    value: function getAllEntrants(racekey) {\n      return _asyncStorage.default.getAllKeys().then(function (keys) {\n        var items = Promise.all(keys.map(function (key) {\n          if (key.startsWith(\"@ORT_entrantsByKey:\" + racekey)) {\n            return _asyncStorage.default.getItem(key);\n          }\n        }));\n        return items;\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _asyncStorage.default.clear();\n    }\n  }, {\n    key: \"addToStarterList\",\n    value: function addToStarterList(racekey, record) {\n      return _asyncStorage.default.setItem(\"@ORT_entrantsByKey:\" + racekey + \":\" + record.nfcId, JSON.stringify(record));\n    }\n  }, {\n    key: \"getRaces\",\n    value: function getRaces() {\n      return _asyncStorage.default.getItem('@ORT_allraces').then(function (content) {\n        return JSON.parse(content);\n      });\n    }\n  }, {\n    key: \"saveRace\",\n    value: function saveRace(raceData) {\n      var raceKey = raceData.raceName + \":\" + raceData.raceDate;\n      raceData.key = raceKey;\n      return _asyncStorage.default.getItem('@ORT_allraces').then(function (races) {\n        var raceArray = races ? JSON.parse(races) : [];\n        raceArray.push(raceData);\n        var ret = _asyncStorage.default.setItem('@ORT_allraces', JSON.stringify(raceArray)).catch(function (e) {\n          return _reactNative.Alert.alert(e.message);\n        });\n        return ret;\n      }).catch(function (e) {\n        return _reactNative.Alert.alert(JSON.stringify(e.message));\n      });\n    }\n  }, {\n    key: \"setCurrentRace\",\n    value: function setCurrentRace(raceInfo) {\n      _asyncStorage.default.setItem('@ORT_currentrace', JSON.stringify(raceInfo));\n    }\n  }, {\n    key: \"getCurrentRace\",\n    value: function getCurrentRace() {\n      return _asyncStorage.default.getItem('@ORT_currentrace');\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults(raceKey) {\n      return _asyncStorage.default.getItem(\"@ORT_finishtimes:\" + raceKey);\n    }\n  }, {\n    key: \"getEverything\",\n    value: function getEverything() {\n      return _asyncStorage.default.getAllKeys().then(function (keys) {\n        return _asyncStorage.default.multiGet(keys);\n      }).catch(function (e) {\n        return _reactNative.Alert.alert(e.message);\n      });\n    }\n  }]);\n}();","map":{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_reactNative","LocalStorage","exports","default","_classCallCheck2","_createClass2","key","value","setStartTime","racekey","timestamp","AsyncStorage","setItem","getStartTime","getItem","writeFinishTime","id","then","times","writeFinishToStorage","catch","timesObj","JSON","parse","stringify","getEntrant","entrantId","getAllEntrants","getAllKeys","keys","items","Promise","all","map","startsWith","clear","addToStarterList","record","nfcId","getRaces","content","saveRace","raceData","raceKey","raceName","raceDate","races","raceArray","push","ret","e","Alert","alert","message","setCurrentRace","raceInfo","getCurrentRace","getResults","getEverything","multiGet"],"sources":["/home/admin/openracetiming/src/lib/LocalStorage.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Alert } from 'react-native';\nexport default class LocalStorage {\n  public static setStartTime(racekey: string, timestamp: number) {\n    return AsyncStorage.setItem(\n      `@ORT_starttimes:${racekey}:default`,\n      `${timestamp}`\n    );\n  }\n\n  public static getStartTime(racekey: string) {\n    return AsyncStorage.getItem(`@ORT_starttimes:${racekey}:default`);\n  }\n\n  public static writeFinishTime(\n    racekey: string,\n    timestamp: number,\n    id: string\n  ) {\n    // catch and write might not be necessary\n    return AsyncStorage.getItem(`@ORT_finishtimes:${racekey}`)\n      .then((times) => {\n        LocalStorage.writeFinishToStorage(times, racekey, timestamp, id);\n      })\n      .catch(() => {\n        LocalStorage.writeFinishToStorage('', racekey, timestamp, id);\n      });\n  }\n\n  private static writeFinishToStorage(\n    times: string,\n    racekey: string,\n    timestamp: number,\n    id: string\n  ) {\n    let timesObj = times ? JSON.parse(times) : {};\n    timesObj[id] = timestamp;\n    return AsyncStorage.setItem(\n      `@ORT_finishtimes:${racekey}`,\n      JSON.stringify(timesObj)\n    );\n  }\n\n  public static getEntrant(racekey: string, entrantId: string) {\n    return AsyncStorage.getItem(`@ORT_entrantsByKey:${racekey}:${entrantId}`);\n  }\n\n  public static getAllEntrants(racekey: string) {\n    return AsyncStorage.getAllKeys().then((keys) => {\n      const items = Promise.all(\n        keys.map((key) => {\n          if (key.startsWith(`@ORT_entrantsByKey:${racekey}`)) {\n            return AsyncStorage.getItem(key);\n          }\n        })\n      );\n      return items;\n    });\n  }\n\n  public static clear() {\n    AsyncStorage.clear();\n  }\n\n  public static addToStarterList(racekey: string, record: string) {\n    return AsyncStorage.setItem(\n      `@ORT_entrantsByKey:${racekey}:${record.nfcId}`,\n      JSON.stringify(record)\n    );\n  }\n\n  public static getRaces() {\n    return AsyncStorage.getItem('@ORT_allraces').then((content) =>\n      JSON.parse(content)\n    );\n  }\n\n  public static saveRace(raceData: object) {\n    const raceKey = `${raceData.raceName}:${raceData.raceDate}`;\n    raceData.key = raceKey;\n    return AsyncStorage.getItem('@ORT_allraces')\n      .then((races) => {\n        let raceArray = races ? JSON.parse(races) : [];\n        raceArray.push(raceData);\n        const ret = AsyncStorage.setItem(\n          '@ORT_allraces',\n          JSON.stringify(raceArray)\n        ).catch((e) => Alert.alert(e.message));\n        return ret;\n      })\n      .catch((e) => Alert.alert(JSON.stringify(e.message)));\n  }\n\n  public static setCurrentRace(raceInfo: object) {\n    AsyncStorage.setItem('@ORT_currentrace', JSON.stringify(raceInfo));\n  }\n\n  public static getCurrentRace() {\n    return AsyncStorage.getItem('@ORT_currentrace');\n  }\n\n  public static getResults(raceKey: string) {\n    return AsyncStorage.getItem(`@ORT_finishtimes:${raceKey}`);\n  }\n\n  public static getEverything() {\n    return AsyncStorage.getAllKeys()\n      .then((keys) => {\n        return AsyncStorage.multiGet(keys);\n      })\n      .catch((e) => Alert.alert(e.message));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}