{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawerActions = void 0;\nexports.default = DrawerRouter;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\nvar _excluded = [\"defaultStatus\"];\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar DrawerActions = exports.DrawerActions = Object.assign({}, _TabRouter.TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nfunction DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return Object.assign({}, state, {\n      history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return Object.assign({}, state, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return Object.assign({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return Object.assign({}, state, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return Object.assign({}, state, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"names":["_nonSecure","require","_TabRouter","_interopRequireWildcard","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","DrawerActions","exports","assign","TabActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","_ref$defaultStatus","defaultStatus","rest","_objectWithoutProperties2","router","TabRouter","isDrawerInHistory","state","_state$history","Boolean","history","some","it","addDrawerToHistory","concat","_toConsumableArray2","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","stale","key","nanoid","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["/home/admin/openracetiming/node_modules/@react-navigation/routers/lib/module/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}