{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../../core/theming\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\"));\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\nvar _colors = require(\"../../styles/colors\");\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    theme = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nvar _default = exports.default = (0, _theming.withTheme)(ToggleButton);\nvar ToggleButtonWithTheme = exports.ToggleButton = (0, _theming.withTheme)(ToggleButton);","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_theming","_color","_interopRequireDefault","_IconButton","_ToggleButtonGroup","_colors","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButton","_ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","_objectWithoutProperties2","borderRadius","roundness","createElement","ToggleButtonGroupContext","Consumer","context","backgroundColor","checked","dark","IconButton","_extends","borderless","onValueChange","accessibilityState","selected","styles","content","borderColor","color","white","black","alpha","rgb","string","StyleSheet","create","width","height","margin","_default","exports","withTheme","ToggleButtonWithTheme"],"sources":["/home/admin/openracetiming/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}