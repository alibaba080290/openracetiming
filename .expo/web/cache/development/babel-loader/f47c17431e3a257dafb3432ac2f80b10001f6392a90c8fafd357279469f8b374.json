{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NfcVHandler = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _reactNative = require(\"react-native\");\nvar _NativeNfcManager = require(\"../NativeNfcManager\");\nvar _NfcError = require(\"../NfcError\");\nvar NfcVHandler = exports.NfcVHandler = function () {\n  function NfcVHandler() {\n    (0, _classCallCheck2.default)(this, NfcVHandler);\n  }\n  return (0, _createClass2.default)(NfcVHandler, [{\n    key: \"transceive\",\n    value: function () {\n      var _transceive = (0, _asyncToGenerator2.default)(function* (bytes) {\n        if (!Array.isArray(bytes)) {\n          throw new Error('IsoDepHandler.transceive only takes input as a byte array');\n        }\n        if (_reactNative.Platform.OS === 'ios') {\n          var _bytes = (0, _toArray2.default)(bytes),\n            flags = _bytes[0],\n            commandCode = _bytes[1],\n            data = _bytes.slice(2);\n          return (0, _NfcError.handleNativeException)(new Promise(function (resolve, reject) {\n            _NativeNfcManager.NativeNfcManager.iso15693_sendRequest({\n              flags: flags,\n              commandCode: commandCode,\n              data: data\n            }, function (err, responseFlag, response) {\n              if (err) {\n                reject(err);\n              } else {\n                resolve([responseFlag].concat((0, _toConsumableArray2.default)(response)));\n              }\n            });\n          }));\n        }\n        return (0, _NfcError.handleNativeException)((0, _NativeNfcManager.callNative)('transceive', [bytes]));\n      });\n      function transceive(_x) {\n        return _transceive.apply(this, arguments);\n      }\n      return transceive;\n    }()\n  }]);\n}();","map":{"version":3,"names":["_reactNative","require","_NativeNfcManager","_NfcError","NfcVHandler","exports","_classCallCheck2","default","_createClass2","key","value","_transceive","_asyncToGenerator2","bytes","Array","isArray","Error","Platform","OS","_bytes","_toArray2","flags","commandCode","data","slice","handleNativeException","Promise","resolve","reject","NativeNfcManager","iso15693_sendRequest","err","responseFlag","response","concat","_toConsumableArray2","callNative","transceive","_x","apply","arguments"],"sources":["/home/admin/openracetiming/node_modules/react-native-nfc-manager/src/NfcTech/NfcVHandler.js"],"sourcesContent":["import {Platform} from 'react-native';\nimport {callNative, NativeNfcManager} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nclass NfcVHandler {\n  async transceive(bytes) {\n    if (!Array.isArray(bytes)) {\n      throw new Error(\n        'IsoDepHandler.transceive only takes input as a byte array',\n      );\n    }\n\n    if (Platform.OS === 'ios') {\n      const [flags, commandCode, ...data] = bytes;\n      return handleNativeException(\n        new Promise((resolve, reject) => {\n          NativeNfcManager.iso15693_sendRequest(\n            {\n                flags,\n                commandCode,\n                data,\n            },\n            (err, responseFlag, response) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve([responseFlag, ...response]);\n              }\n            },\n          );\n        }),\n      );\n    }\n\n    return handleNativeException(callNative('transceive', [bytes]));\n  }\n}\n\nexport {NfcVHandler};\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AAAkD,IAE5CG,WAAW,GAAAC,OAAA,CAAAD,WAAA;EAAA,SAAAA,YAAA;IAAA,IAAAE,gBAAA,CAAAC,OAAA,QAAAH,WAAA;EAAA;EAAA,WAAAI,aAAA,CAAAD,OAAA,EAAAH,WAAA;IAAAK,GAAA;IAAAC,KAAA;MAAA,IAAAC,WAAA,OAAAC,kBAAA,CAAAL,OAAA,EACf,WAAiBM,KAAK,EAAE;QACtB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACzB,MAAM,IAAIG,KAAK,CACb,2DACF,CAAC;QACH;QAEA,IAAIC,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;UACzB,IAAAC,MAAA,OAAAC,SAAA,CAAAb,OAAA,EAAsCM,KAAK;YAApCQ,KAAK,GAAAF,MAAA;YAAEG,WAAW,GAAAH,MAAA;YAAKI,IAAI,GAAAJ,MAAA,CAAAK,KAAA;UAClC,OAAO,IAAAC,+BAAqB,EAC1B,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YAC/BC,kCAAgB,CAACC,oBAAoB,CACnC;cACIT,KAAK,EAALA,KAAK;cACLC,WAAW,EAAXA,WAAW;cACXC,IAAI,EAAJA;YACJ,CAAC,EACD,UAACQ,GAAG,EAAEC,YAAY,EAAEC,QAAQ,EAAK;cAC/B,IAAIF,GAAG,EAAE;gBACPH,MAAM,CAACG,GAAG,CAAC;cACb,CAAC,MAAM;gBACLJ,OAAO,EAAEK,YAAY,EAAAE,MAAA,KAAAC,mBAAA,CAAA5B,OAAA,EAAK0B,QAAQ,EAAC,CAAC;cACtC;YACF,CACF,CAAC;UACH,CAAC,CACH,CAAC;QACH;QAEA,OAAO,IAAAR,+BAAqB,EAAC,IAAAW,4BAAU,EAAC,YAAY,EAAE,CAACvB,KAAK,CAAC,CAAC,CAAC;MACjE,CAAC;MAAA,SA9BKwB,UAAUA,CAAAC,EAAA;QAAA,OAAA3B,WAAA,CAAA4B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAVH,UAAU;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}